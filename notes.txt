URL
------------------------------------------------------
slack github link characteristics:
    <a target="_blank" class="c-link" data-stringify-link="https://github.com/CodesmithLLC/unit-11-authentication" delay="150" data-sk="tooltip_parent" href="https://github.com/CodesmithLLC/unit-11-authentication" rel="noopener noreferrer">https://github.com/CodesmithLLC/unit-11-authentication</a>

    -class: c-link

urlclipping script:
const links = document.querySelectorAll("a");
    const array = [];
    const base = 'github';

    for (const link of links) {
        const urlClean = link.href;
        if (urlClean.includes(base)) array.push(urlClean);
        
    };
    console.log(array);


AUTHENTICATION
------------------------------------------------------
https://docs.github.com/en/rest/guides/basics-of-authentication

/* test code */
const client = new GitHubClient(new ProductHeaderValue('autoFork'));
const tokenAuth = new Credentials('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');
client.Credentials = tokenAuth;


/*POST REQUEST TEST CODE
----------------------*/
//code to make fork post request to github api

const { Octokit } = require("@octokit/core");
const { request } = require("@octokit/request");

//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 --- please DO NOT copy/paste anywhere

const octokit = new Octokit({ auth: 'g/hp_cLg7ZvLEBetZsiZhFc7fzu1xwDN1T90V6fyt' })

const result = await request("POST /user/repos", {
  headers: {
    authorization: "token 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",
  },
  name: 'octokiTest'
});
console.log(result.data);

console.log(`${result.data.length} repos found.`);

    
/*POST request to fork public repo for authenticate user. Happens asynchronously
const reponse = await octokit.request("POST /repos/uitie/data-structures-assessment/forks");
    response.then(data => console.log(data));
    
    auth: accToken,
    userAgent: 'autoFork',

    timeZone: 'America/New_York',

    //baseurl not required?

    //debugging
    log: {
        debug: () => {},
        info: () => {},
        warn: console.warn,
        error: console.error
      },
    
      request: {
        agent: undefined,
        fetch: undefined,
        timeout: 0
      }
});*/




